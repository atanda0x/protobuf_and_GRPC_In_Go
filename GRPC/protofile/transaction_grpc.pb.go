// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protofile/transaction.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoneyTransferedClient is the client API for MoneyTransfered service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoneyTransferedClient interface {
	MoneyTransfered(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
}

type moneyTransferedClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyTransferedClient(cc grpc.ClientConnInterface) MoneyTransferedClient {
	return &moneyTransferedClient{cc}
}

func (c *moneyTransferedClient) MoneyTransfered(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/protofiles.MoneyTransfered/MoneyTransfered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoneyTransferedServer is the server API for MoneyTransfered service.
// All implementations must embed UnimplementedMoneyTransferedServer
// for forward compatibility
type MoneyTransferedServer interface {
	MoneyTransfered(context.Context, *TransferRequest) (*TransferResponse, error)
	mustEmbedUnimplementedMoneyTransferedServer()
}

// UnimplementedMoneyTransferedServer must be embedded to have forward compatible implementations.
type UnimplementedMoneyTransferedServer struct {
}

func (UnimplementedMoneyTransferedServer) MoneyTransfered(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoneyTransfered not implemented")
}
func (UnimplementedMoneyTransferedServer) mustEmbedUnimplementedMoneyTransferedServer() {}

// UnsafeMoneyTransferedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneyTransferedServer will
// result in compilation errors.
type UnsafeMoneyTransferedServer interface {
	mustEmbedUnimplementedMoneyTransferedServer()
}

func RegisterMoneyTransferedServer(s grpc.ServiceRegistrar, srv MoneyTransferedServer) {
	s.RegisterService(&MoneyTransfered_ServiceDesc, srv)
}

func _MoneyTransfered_MoneyTransfered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferedServer).MoneyTransfered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.MoneyTransfered/MoneyTransfered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferedServer).MoneyTransfered(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoneyTransfered_ServiceDesc is the grpc.ServiceDesc for MoneyTransfered service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoneyTransfered_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.MoneyTransfered",
	HandlerType: (*MoneyTransferedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MoneyTransfered",
			Handler:    _MoneyTransfered_MoneyTransfered_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofile/transaction.proto",
}
