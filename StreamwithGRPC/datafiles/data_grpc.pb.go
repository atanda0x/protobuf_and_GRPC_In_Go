// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: datafiles/data.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoneyTransferClient is the client API for MoneyTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoneyTransferClient interface {
	MoneyTransfer(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (MoneyTransfer_MoneyTransferClient, error)
}

type moneyTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyTransferClient(cc grpc.ClientConnInterface) MoneyTransferClient {
	return &moneyTransferClient{cc}
}

func (c *moneyTransferClient) MoneyTransfer(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (MoneyTransfer_MoneyTransferClient, error) {
	stream, err := c.cc.NewStream(ctx, &MoneyTransfer_ServiceDesc.Streams[0], "/datafiles.MoneyTransfer/MoneyTransfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &moneyTransferMoneyTransferClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MoneyTransfer_MoneyTransferClient interface {
	Recv() (*TransactionResponse, error)
	grpc.ClientStream
}

type moneyTransferMoneyTransferClient struct {
	grpc.ClientStream
}

func (x *moneyTransferMoneyTransferClient) Recv() (*TransactionResponse, error) {
	m := new(TransactionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MoneyTransferServer is the server API for MoneyTransfer service.
// All implementations must embed UnimplementedMoneyTransferServer
// for forward compatibility
type MoneyTransferServer interface {
	MoneyTransfer(*TransactionRequest, MoneyTransfer_MoneyTransferServer) error
	mustEmbedUnimplementedMoneyTransferServer()
}

// UnimplementedMoneyTransferServer must be embedded to have forward compatible implementations.
type UnimplementedMoneyTransferServer struct {
}

func (UnimplementedMoneyTransferServer) MoneyTransfer(*TransactionRequest, MoneyTransfer_MoneyTransferServer) error {
	return status.Errorf(codes.Unimplemented, "method MoneyTransfer not implemented")
}
func (UnimplementedMoneyTransferServer) mustEmbedUnimplementedMoneyTransferServer() {}

// UnsafeMoneyTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneyTransferServer will
// result in compilation errors.
type UnsafeMoneyTransferServer interface {
	mustEmbedUnimplementedMoneyTransferServer()
}

func RegisterMoneyTransferServer(s grpc.ServiceRegistrar, srv MoneyTransferServer) {
	s.RegisterService(&MoneyTransfer_ServiceDesc, srv)
}

func _MoneyTransfer_MoneyTransfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MoneyTransferServer).MoneyTransfer(m, &moneyTransferMoneyTransferServer{stream})
}

type MoneyTransfer_MoneyTransferServer interface {
	Send(*TransactionResponse) error
	grpc.ServerStream
}

type moneyTransferMoneyTransferServer struct {
	grpc.ServerStream
}

func (x *moneyTransferMoneyTransferServer) Send(m *TransactionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MoneyTransfer_ServiceDesc is the grpc.ServiceDesc for MoneyTransfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoneyTransfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datafiles.MoneyTransfer",
	HandlerType: (*MoneyTransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MoneyTransfer",
			Handler:       _MoneyTransfer_MoneyTransfer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "datafiles/data.proto",
}
